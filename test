1. что такое промис?
2. что такое acync await?
3. что такое context .this?
4. что такое замыкание?
5. зачем нужен стреллочные функции ES6 ?



1. Promise - это один из способов работы с асинхронным кодом в JavaScript
без написания слишком большого количества обратных вызовов, и он принимает одну
функцию которая передает нам resolve и reject. Reject говорит нам что код выполнен успешно
а reject говорит что код отклонен. Promise дает нам обещание того что
код выполниться в будущем, но вероятно не сразу.

let done = true;

const p = new Promise((resolve, reject) => {
  if (done) {
    resolve("выполнено успешно");
  } else {
    reject("выполнено с ошибкой");
  }
});



2. Я думаю что цель функций async/await упростить использование promises синхронно и воспроизвести
некоторое действие над группой Promises. Так же async/await помогает написать код
компактнее и понятнее без постоянного использования .then
const getData = async () => {
    const response = await fetch('https://restcountries.com/v3.1/name/);
    const {data} = await response.json();
    console.log(data)

getData()



3. Контекст является значением ключевого слова this, которое ссылается на обьект.




4. Замыкание функции. замыкание даёт  доступ к функции которая находиться выше.





5. В использовании стрелочных функций помогает делать код гораздо короче но по моему мнению немного менее читабельным.
а простые функции делают код длинным.
Стрелочные функции являются Function Expression. и в этой функции вызов ее реализуется только
после определения ее. То-есть в локальной среде кода.
А обычные функции являются Function Declaration, мы можем обращаться к ней когда и где захотим.

const arrowFunction = (num1, num2) => {
  const result = num1 + num2;
  return result;
};
